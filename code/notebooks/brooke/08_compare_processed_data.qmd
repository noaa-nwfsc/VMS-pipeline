---
title: "Compare Processed Data"
format: 
  html:
    toc: true
    embed-resources: true
---

**Author**: Brooke Hawkins

**Date**: March 19, 2025

**Purpose**: Parity test to compare data between different pipeline runs.

**Specific use case**: I ran the pipeline for Dungeness crab in 2012 with `target_cutoff` set to `1` and `1.1`. I want to see how different the record counts are with a difference in target cutoff. I expect the differences to be small, and for there to be slightly fewer records in the case with cutoff set to `1.1`, because it will exclude trips where crab had > 0% and < 10% more revenue or landings than the next most profitable or landed species.

This script will print entire file names and column names of dataframes, so *make sure there are no confidential file names or dataframes if you push the output onto GitHub*.

```{r}
library(here)
library(dplyr)
```

# Helper functions

Write a function to read in two RDS files and compare their names, dimensions, column names, and year ranges.

Inputs:

-   `file_name_1`: RDS file name for first dataframe to read in
-   `file_name_2`: RDS file name for second dataframe to read in
-   `date_colname_1`: column name for date field in first dataframe
-   `date_colname_2`: column name for date field in second dataframe

Outputs: None

The function doesn't return anything, it will print if there are or are not differences. If there are differences, it will print whatever differs for the first and second file, in that order. It assumes there are the same number of columns in each dataframe.

```{r}
compare_dataframes <- function(file_name_1, file_name_2, date_colname_1, date_colname_2) {
  # print file names
  print(paste("Comparing", file_name_1))
  print(paste("to", file_name_2))
  
  # load data
  df_1 <- readRDS(file_name_1)
  df_2 <- readRDS(file_name_2)
  
  # are the dimensions the same?
  same_dim <- (dim(df_1) == dim(df_2))
  # if any of the dimensions differ, print the dimensions
  if (any(!same_dim)) {
    print("Different dimensions:")
    print(dim(df_1))
    print(dim(df_2))
  } else {
    print("Same dimensions.")
  }
  
  # are the column names the same?
  same_colnames <- (colnames(df_1) == colnames(df_2))
  # if any of the column names differ, print the dimensions
  if (any(!same_colnames)) {
    print("Different column names:")
    print(colnames(df_1))
    print(colnames(df_2))
  } else {
    print("Same column names.")
  }
  
  # are the date ranges the same?
  same_dates <- (range(df_1[[date_colname_1]]) == range(df_2[[date_colname_2]]))
  if (any(!same_dates)) {
    print("Different date ranges:")
    print(range(df_1[[date_colname_1]]))
    print(range(df_2[[date_colname_2]]))
  } else {
    print(paste("Same date ranges:", range(df_1[[date_colname_1]])))
  }
}
```

Write a function to compare two lists of files.

Inputs:

-   `file_vector_1`: first vector of RDS file names of dataframes to compare
-   `file_vector_2`: second vector of RDS file names of dataframes to compare
-   `date_colname_vector_1`: first vector of date column names, same length as `file_vector_1`
-   `date_colname_vector_2`: second vector of date column names, same length as `file_vector_2`

Outputs: None

The function doesn't return anything, it will print if there are or are not differences. If there are a different number of files, it will run no additional checks. It runs a for loop using the function above. It assumes the files should be compared in the order they are listed in (e.g. first element of `file_vector_1` is compared to the first element of `file_vector_2`). To compare date ranges, it will call column names provided in `date_colname_vector_1` and `date_colname_vector_2`.

```{r}
compare_file_list <- function (file_vector_1, file_vector_2, date_colname_vector_1, date_colname_vector_2) {
  # check same number of files
  same_file_number <- (length(file_vector_1) == length(file_vector_2))
  print("-----")
  if (!same_file_number) {
    print("Different number of files. The files are:")
    print(file_vector_1)
    print(files_2_step1)
  } else {
    print("Same number of files.")
    # iterate over files
    for (file_index in 1:length(file_vector_1)) {
      # compare files
      compare_dataframes(
        file_name_1 = file_vector_1[file_index], 
        file_name_2 = file_vector_2[file_index], 
        date_colname_1 = date_colname_vector_1[file_index], 
        date_colname_2 = date_colname_vector_2[file_index]
      )
      print("-----")
    }
  }
}
```

# Comparisons

Compare files between directory 1 `dir_1` and directory 2 `dir_2`.

In this case, `dir_1` has the `target_cutoff` of `1`, while `dir_2` has the `target_cutoff` of `1.1`.

```{r}
# list directories
dir_1 <- here("Confidential", "processed_data", "processed_2025-03-19a")
dir_2 <- here("Confidential", "processed_data", "processed_2025-03-19")

# get vector of file names
files_1 <- list.files(path = dir_1, full.names = TRUE, recursive = TRUE)
files_2 <- list.files(path = dir_2, full.names = TRUE, recursive = TRUE)

# list year(s) of preocessed data to check as a character string, e.g. "2012" or "2019|2020|2021"
year_to_check <- "2014"

# filter the files to the year to check
files_1 <- files_1[grepl(year_to_check, files_1)]
files_2 <- files_2[grepl(year_to_check, files_2)]
```

## Step 1

```{r}
# list relevant files
files_1_step1 <- files_1[grepl("fishtix_withFTID", files_1)]
files_2_step1 <- files_2[grepl("fishtix_withFTID", files_2)]

# filter for years I want to check
files_1_step1 <- files_1_step1[grepl(year_to_check, files_1_step1)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step1, 
  file_vector_2 = files_2_step1, 
  date_colname_vector_1 = c("date", "date"),
  date_colname_vector_2 = c("date", "date")
)
```

Same dimensions, columns, and dates for both runs.

## Step 2

```{r}
# list relevant files
files_1_step2 <- files_1[grepl("vessel_length_key|fishtix_vlengths_withFTID", files_1)]
files_2_step2 <- files_2[grepl("vessel_length_key|fishtix_vlengths_withFTID", files_2)]

# filter for years I want to check
files_1_step2 <- files_1_step2[grepl(year_to_check, files_1_step2)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step2, 
  file_vector_2 = files_2_step2, 
  date_colname_vector_1 = c("date", "date", "year", "year"),
  date_colname_vector_2 = c("date", "date", "year", "year")
)
```

Same dimensions, columns, and dates for both runs. Something weird going on with the infinite date ranges for `vessel_length_key`, though.

## Step 3

### Clean

```{r}
# list relevant files
files_1_step3a <- files_1[grepl("vms_clean", files_1)]
files_2_step3a <- files_2[grepl("vms_clean", files_2)]

# filter for years I want to check
files_1_step3a <- files_1_step3a[grepl(year_to_check, files_1_step3a)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step3a, 
  file_vector_2 = files_2_step3a, 
  date_colname_vector_1 = c("UTCDATETIME", "UTCDATETIME"),
  date_colname_vector_2 = c("UTCDATETIME", "UTCDATETIME")
)
```

Same dimensions, columns, and dates for both runs.

### Duplicates

```{r}
# list relevant files
files_1_step3b <- files_1[grepl("duplicates", files_1)]
files_2_step3b <- files_2[grepl("duplicates", files_2)]

# filter for years I want to check
files_1_step3b <- files_1_step3b[grepl(year_to_check, files_1_step3b)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step3b, 
  file_vector_2 = files_2_step3b, 
  date_colname_vector_1 = c("UTCDATETIME", "UTCDATETIME"),
  date_colname_vector_2 = c("UTCDATETIME", "UTCDATETIME")
)
```

Same dimensions, columns, and dates for both runs.

## Step 4

#### All

```{r}
# list relevant files
files_1_step4a <- files_1[grepl("matched_alltix", files_1)]
files_2_step4a <- files_2[grepl("matched_alltix", files_2)]

# filter for years I want to check
files_1_step4a <- files_1_step4a[grepl(year_to_check, files_1_step4a)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step4a, 
  file_vector_2 = files_2_step4a, 
  date_colname_vector_1 = c("date", "date"),
  date_colname_vector_2 = c("date", "date")
)
```

Same dimensions, columns, and dates for both runs.

#### VMS

```{r}
# list relevant files
files_1_step4b <- files_1[grepl("matched_vmstix", files_1)]
files_2_step4b <- files_2[grepl("matched_vmstix", files_2)]

# filter for years I want to check
files_1_step4b <- files_1_step4b[grepl(year_to_check, files_1_step4b)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step4b, 
  file_vector_2 = files_2_step4b, 
  date_colname_vector_1 = c("date", "date"),
  date_colname_vector_2 = c("date", "date")
)
```

Same dimensions, columns, and dates for both runs.

## Step 5

### Unfiltered

```{r}
# list relevant files
files_1_step5a <- files_1[grepl("unfiltered", files_1)]
files_2_step5a <- files_2[grepl("unfiltered", files_2)]

# filter for years I want to check
files_1_step5a <- files_1_step5a[grepl(year_to_check, files_1_step5a)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step5a, 
  file_vector_2 = files_2_step5a, 
  date_colname_vector_1 = c("date", "date"),
  date_colname_vector_2 = c("date", "date")
)
```

Same dimensions, columns, and dates for both runs.

### Filtered

```{r}
# list relevant files
files_1_step5b <- files_1[grepl("_filtered", files_1)]
files_2_step5b <- files_2[grepl("_filtered", files_2)]

# filter for years I want to check
files_1_step5b <- files_1_step5b[grepl(year_to_check, files_1_step5b)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step5b, 
  file_vector_2 = files_2_step5b, 
  date_colname_vector_1 = c("date", "date"),
  date_colname_vector_2 = c("date", "date")
)
```

Same dimensions, columns, and dates for both runs.

## Step 6

```{r}
# list relevant files
files_1_step6 <- files_1[grepl("interpolated", files_1)]
files_2_step6 <- files_2[grepl("interpolated", files_2)]

# filter for years I want to check
files_1_step6 <- files_1_step6[grepl(year_to_check, files_1_step6)]

# compare files
compare_file_list(
  file_vector_1 = files_1_step6, 
  file_vector_2 = files_2_step6, 
  date_colname_vector_1 = c("date", "date"),
  date_colname_vector_2 = c("date", "date")
)
```

Same dimensions, columns, and dates for both runs.

### Deep dive - target attribution

Check the count of interpolated pings that are assigned to DCRB with the difference in `target_cutoff`.

```{r}
library(tidyverse)

# load VMS data
vms_file_1 <- files_1[grepl("interpolated", files_1)]
vms_file_2 <- files_2[grepl("interpolated", files_2)]
vms_df_1 <- read_rds(vms_file_1[1]) # read the first file, if there are multiple years
vms_df_2 <- read_rds(vms_file_2[1]) # read the first file, if there are multiple years

# check target column count where target is Dungeness
sum(vms_df_1$TARGET_lbs == "DCRB")
sum(vms_df_2$TARGET_lbs == "DCRB")
sum(vms_df_1$TARGET_rev == "DCRB")
sum(vms_df_2$TARGET_rev == "DCRB")

# check target column count where target is NONE
sum(vms_df_1$TARGET_lbs == "NONE")
sum(vms_df_2$TARGET_lbs == "NONE")
sum(vms_df_1$TARGET_rev == "NONE")
sum(vms_df_2$TARGET_rev == "NONE")

# check target column count where target is sablefish
sum(vms_df_1$TARGET_lbs == "SABL")
sum(vms_df_2$TARGET_lbs == "SABL")
sum(vms_df_1$TARGET_rev == "SABL")
sum(vms_df_2$TARGET_rev == "SABL")
```

# Conclusion

For Dungeness crab in 2012, running the pipeline with a target_cutoff of `1` vs. `1.1` led to no changes in the pipeline output dimensions, or in the assignment of interpolated pings as "DCRB" versus any other category. There are more "NONE" targets assigned when the target cutoff is higher. But a difference of 1 vs. 1.1 (0% difference vs. 10% difference between the 1st and 2nd species in terms of revenue and landings) had no impact for Dungeness crab. This is notably not the case for other fisheries, such as "SABL", which do show a difference in attributed records for the change in `target_cutoff`.

```{r, include=FALSE}
# I ran this to figure out manually what the names of the date columns were as I added steps
test_file <- files_1_step5b[1]
test_df <- readRDS(test_file)
colnames(test_df)
```
